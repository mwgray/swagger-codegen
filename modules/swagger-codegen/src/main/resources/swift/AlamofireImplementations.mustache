// AlamofireImplementations.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire

public class AlamofireRequestBuilderFactory: RequestBuilderFactory {
    public static var contentSerializers: [String: ResponseSerializer<AnyObject, NSError>] = [
        "application/json":Request.JSONResponseSerializer(options: .AllowFragments),
        ]

    func getBuilder<T>() -> RequestBuilder<T>.Type {
        return AlamofireRequestBuilder<T>.self
    }
}

// Store manager to retain its reference
private var managerStore: [String: Alamofire.Manager] = [:]

class AlamofireRequestBuilder<T>: RequestBuilder<T> {
    required init(method: String, URLString: String, parameters: [String : AnyObject]?, isBody: Bool) {
        super.init(method: method, URLString: URLString, parameters: parameters, isBody: isBody)
    }

    override func execute(completion: (response: Response<T>?, error: ErrorType?) -> Void) {
        let managerId = NSUUID().UUIDString
        // Create a new manager for each request to customize its request header
        let configuration = NSURLSessionConfiguration.defaultSessionConfiguration()
        configuration.HTTPAdditionalHeaders = buildHeaders()
        let manager = Alamofire.Manager(configuration: configuration)
        managerStore[managerId] = manager

        let encoding = isBody ? Alamofire.ParameterEncoding.JSON : Alamofire.ParameterEncoding.URL
        let xMethod = Alamofire.Method(rawValue: method)
        let fileKeys = parameters == nil ? [] : parameters!.filter { $1.isKindOfClass(NSURL) }
                                                           .map { $0.0 }

        if fileKeys.count > 0 {
            manager.upload(
                xMethod!, URLString, headers: nil,
                multipartFormData: { mpForm in
                    for (k, v) in self.parameters! {
                        switch v {
                        case let fileURL as NSURL:
                            mpForm.appendBodyPart(fileURL: fileURL, name: k)
                            break
                        case let string as NSString:
                            mpForm.appendBodyPart(data: string.dataUsingEncoding(NSUTF8StringEncoding)!, name: k)
                            break
                        case let number as NSNumber:
                            mpForm.appendBodyPart(data: number.stringValue.dataUsingEncoding(NSUTF8StringEncoding)!, name: k)
                            break
                        default:
                            fatalError("Unprocessable value \(v) with key \(k)")
                            break
                        }
                    }
                },
                encodingMemoryThreshold: Manager.MultipartFormDataEncodingMemoryThreshold,
                encodingCompletion: { encodingResult in
                    switch encodingResult {
                    case .Success(let uploadRequest, _, _):
                        if let onProgressReady = self.onProgressReady {
                            onProgressReady(uploadRequest.progress)
                        }
                        self.processRequest(uploadRequest, managerId, completion)
                    case .Failure(let encodingError):
                        completion(response: nil, error: ErrorResponse.Error(415, nil, encodingError))
                    }
                }
            )
        } else {
            let request = manager.request(xMethod!, URLString, parameters: parameters, encoding: encoding)
            if let onProgressReady = self.onProgressReady {
                onProgressReady(request.progress)
            }
            processRequest(request, managerId, completion)
        }

    }

    private func processRequest(request: Request, _ managerId: String, _ completion: (response: Response<T>?, error: ErrorType?) -> Void) {
        if let credential = self.credential {
            request.authenticate(usingCredential: credential)
        }
        
        request.validate().response { (request:NSURLRequest?, response:NSHTTPURLResponse?, data:NSData?, error:NSError?) in

            // remove the manager from the store
            managerStore.removeValueForKey(managerId)
            
            guard error == nil else {
                // was a error, stop processing and send error up
                return completion(response: nil, error: ErrorResponse.Error(response?.statusCode ?? 500, data, error!))
            }
            
            var body:T? = nil
            
            if let contentTypeString = response?.allHeaderFields["Content-Type"] as? String {
                if let contentSerializer = AlamofireRequestBuilderFactory.contentSerializers[contentTypeString] {
                    if let result = contentSerializer.serializeResponse(request, response, data, error).value {
                        body = Decoders.decode(clazz: T.self, source: result)
                    }
                }
            }
            else {
                // no Content-Type provided, try some workarounds
                switch T.self {
                    
                case is String.Type:
                    // use the stringResponseSerializer to parse data
                    let result = Request.stringResponseSerializer().serializeResponse(request, response, data, error).value ?? ""
                    body = result as! T
                    
                case is Void.Type:
                    // always return nil
                    body = nil
                    
                case is NSData.Type:
                    // already is a NSData, send it along
                    body = data as! T
                    
                default:
                    // unknown data type
                    return completion(response: nil, error: ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Could not interpret data"])))
                }
            }
            
            completion(response:Response(response: response!, body: body), error: nil)
        }
    }

    private func buildHeaders() -> [String: AnyObject] {
        var httpHeaders = Manager.defaultHTTPHeaders
        for (key, value) in self.headers {
            httpHeaders[key] = value
        }
        return httpHeaders
    }
}
