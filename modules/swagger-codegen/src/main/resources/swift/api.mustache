{{#operations}}//
// {{classname}}.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire

public struct {{classname}} {
{{#operation}}

  public class {{operationId}} : HTTPEndpoint {

    public typealias ResultType = {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}Empty{{/returnType}}

    public static let method = HTTPMethod.{{httpMethod}}

    public static let path = "{{path}}"

    public static let headers: [String : String] = [:]
{{#hasParams}}

{{#allParams}}    public let {{paramName}}: {{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}{{{datatypeWithEnum}}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}
{{/allParams}}

    public init({{#allParams}}{{paramName}}: {{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}{{{datatypeWithEnum}}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}{{#hasMore}}, {{/hasMore}}{{/allParams}}) {
{{#allParams}}      self.{{paramName}} = {{paramName}}
{{/allParams}}
    }{{/hasParams}}

    public func encode() throws -> [String: Any]? {

{{^hasParams}}      return nil{{/hasParams}}{{#hasParams}}      var encoded = [String: Any]()

{{#allParams}}      {{^isBodyParam}}encoded.encode(key:"{{paramName}}", value: {{paramName}}){{/isBodyParam}}{{#isBodyParam}}encoded += {{paramName}}.encode(){{/isBodyParam}}
{{/allParams}}

      return encoded{{/hasParams}}
    }
  }
{{/operation}}

  // should not be instantiated
  private init() {

  }
}
{{#swiftUseApiNamespace}}
}
{{/swiftUseApiNamespace}}
{{/operations}}
